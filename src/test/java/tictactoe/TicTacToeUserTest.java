package tictactoe;

// import egovframework.ateli9r.admin.AdminUserService;
// import egovframework.ateli9r.admin.AdminUserServiceImpl;
// import egovframework.ateli9r.admin.AdminUserStore;
// import egovframework.ateli9r.admin.AdminUserStoreLocal;
// import egovframework.ateli9r.admin.dto.AdminUserLoginRequestDto;
// import egovframework.ateli9r.admin.dto.AdminUserLoginResponseDto;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class TicTacToeUserTest {
    // private final AdminUserService adminUserService;

    public TicTacToeUserTest() {
        // AdminUserStore store = new AdminUserStoreLocal();
        // adminUserService = new AdminUserServiceImpl(store);
    }

    /**
     * 회원가입
     * - 사용자의 계정을 생성한다
     */
    @Test
    public void testCreateUser() {
        /*
         * # 전제조건
         * - 생성하고자 하는 아이디로 기생성된 계정이 없어야 한다
         * 
         * # 종료조건
         * - 생성하고자 하는 아이디로 기생성된 계정이 없어야 한다.
         * - 회원가입 완료 메시지가 노출 되어야 한다.
         * - 로그인 페이지에서 회원가입한 아이디와 패스워드로 로그인 되어야 한다.
         */

        //  회원 가입	T-02-0001	필수항목 확인	가입하기 버튼 클릭 시, 필수 항목이 비어 있는 경우 오류사항 안내를 출력한다.
        //  회원 가입	T-02-0002	중복항목 확인	가입하기 버튼 클릭 시, 기존 유저와 겹쳐지는 항목(비밀번호 제외)이 있을 경우 오류사항 안내를 출력한다.
        //  회원 가입	T-02-0003	회원 가입 성공	회원가입이 완료 되면 안내창과 함께 로그인 페이지로 이동한다.
         
    }

    /**
     * 아이디 찾기
     * - 사용자의 아이디를 조회한다
     */
    @Test
    public void testFindUserId() {
        /*
         * # 전제조건
         * - 회원가입시 입력한 이메일을 알고 있어야 한다
         * 
         * # 종료조건
         * - 인증코드 안내 메시지가 노출 되어야 한다
         * - 인증코드로 아이디 조회가 가능하여야 한다
         */

        // 아이디 찾기	T-03-0001	코드 호출	인증코드 전송 클릭 시 임의의 코드가 alert창으로 출력 됨.	
        // 아이디 찾기	T-03-0002	아이디 찾기 실패	임의의 코드와 입력 된 코드가 동일하지 않다면 이를 안내하는 alert창이 출력 됨.	
        // 아이디 찾기	T-03-0003	아이디 찾기 성공	임의의 코드와 입력 된 코드가 동일하다면 아이디를 알려주는 페이지로 이동.	
        
    }


    /**
     * 비밀번호 찾기
     * - 사용자의 비밀번호를 조회한다
     */
    @Test
    public void testFindUserPw() {
        /*
         * # 전제조건
         * - 회원가입시 입력한 아이디와 이메일을 알고 있어야 한다
         * 
         * # 종료조건
         * - 인증코드 안내 메시지가 노출 되어야 한다
         * - 인증코드로 비밀번호를 변경할 수 있어야 한다
         */

        // 비밀번호 찾기	T-04-0001	코드 호출	인증코드 전송 클릭 시 임의의 코드가 alert창으로 출력 됨.	
        // 비밀번호 찾기	T-04-0002	비밀번호 찾기 실패	임의의 코드와 입력 된 코드가 동일하지 않다면 이를 안내하는 alert창이 출력 됨.	
        // 비밀번호 찾기	T-04-0003	비밀번호 찾기 성공	임의의 코드와 입력 된 코드가 동일하다면 비밀번호를 변경하는 페이지로 이동.	
        // 비밀번호 변경	T-04-0004	비밀번호 변경 실패	입력 된 비밀번호와 비밀번호 확인이 동일하지 않다면 이를 안내하는 alert창이 출력 됨.
        // 비밀번호 변경	T-04-0005	비밀번호 변경 성공	입력 된 비밀번호와 비밀번호 확인이 동일하다면 비밀번호 변경 완료 안내와 함께 로그인 페이지로 이동한다.
        // 메인 - 설정	T-05-0009	비밀번호 변경 이동	메인 설정 창에서 비밀번호 변경 클릭 시, 비밀번호 변경페이지(T-04-0004)로 이동.	        
        
    }

    /**
     * 게임 전적 조회
     * - 사용자의 게임 전적을 조회한다
     */
    @Test
    public void testViewGameRank() {
        /*
         * # 전제조건
         * - 조회하고자 하는 아이디를 알고 있거나 랭킹 5위 내의 정보(닉네임, 프로필, 전적)를 조회할 수 있어야 한다
         * 
         * # 종료조건
         * - 게임 전적이 조회된다
         */

        //  메인	T-05-0002	유저 정보 출력	T-01-0001, 로그인에 성공하면 메인 페이지에 접속 되면서 해당 유저의 정보가 메인 상단에 출력 된다. (유저 닉네임, 승률, 프로필 이미지)        
        //  메인	T-05-0003	랭킹 정보 출력	유저들의 승률을 비교하여 상위 1~5위의 유저가 메인 우측 하단에 출력 된다.        
    }

    /**
     * 게임 전적 변경
     * - 사용자의 게임 전적을 변경한다
     */
    @Test
    public void testChangeGameRank() {
        /*
         * # 전제조건
         * - 아이디에 매핑된 전적을 변경할 수 있어야 한다
         * 
         * # 종료조건
         * - 게임 전적이 변경되야 한다
         */

        // 메인 - 설정	T-05-0008	전적 리셋 하기	메인 설정 창에서 전적 리셋 클릭 시, 유저의 전적이 0승 0패 0무로 초기화 된다.        
    }

    /**
     * 유저 정보 변경
     * - 사용자의 정보를 변경한다
     */
    @Test
    public void testChangeUserInfo() {
        /*
         * # 전제조건
         * - 세션에 저장된 아이디에 매핑된 계정이 있어야 한다
         * 
         * # 종료조건
         * - 계정 정보가 변경되어야 한다
         */

        // 메인	T-05-0006	유저 프로필 사진 변경	사진 작성 버튼을 클릭하고, 이미지 파일을 업로드하면 유저의 프로필 사진이 변경된다.
        // 메인	T-05-0007	유저 닉네임 변경	유저 닉네임 옆의 작성버튼을 클릭하면 닉네임을 변경 할 수 있는 창이 출력. 바뀌는 닉네임과 중복되는 닉네임이 있다면alert 창으로 알림.
        
    }

    /**
     * 유저 정보 삭제
     * - 사용자의 정보를 삭제한다
     */
    @Test
    public void testDeleteUserInfo() {
        /*
         * # 전제조건
         * - 세션에 저장된 아이디에 매핑된 계정이 있어야 한다
         * 
         * # 종료조건
         * - 계정 정보가 데이터베이스에서 삭제되어야 한다
         */

        //  메인 - 설정	T-05-0011	회원탈퇴	메인 설정 창에서 회원탈퇴 클릭 시, 회원 정보가 삭제 되며 게임 입장 페이지로 이동한다.	
        
    }

    /**
     * 로그인
     */
    @Test
    public void testLogin() {
        /*
         * # 전제조건
         * - 아이디와 비밀번호를 알고 있다
         * 
         * # 종료조건
         * - 세션이 생성되어야 한다
         */

        //  로그인	T-01-0001	로그인 성공	아이디와 비밀번호 란에 올바른 값이 입력 된 뒤 로그인 버튼을 누르면 메인 페이지로 접속 된다.
        //  로그인	T-01-0002	로그인 실패	아이디와 비밀번호 란에 올바르지 않은 값, 혹은 비어 있는 값이 입력 된 뒤에 로그인 버튼을 누르면 오류사항 안내를 출력한다.
        // 메인	T-05-0001	페이지 접속	로그인이 성공하면 메인 페이지로 이동한다.         

    }

    /**
     * 로그아웃
     */
    @Test
    public void testLogout() {
        /*
         * # 전제조건
         * - 세션이 생성되어 있다
         * 
         * # 종료조건
         * - 세션이 삭제되어야 한다
         */

        //  메인 - 설정	T-05-0010	로그아웃	메인 설정 창에서 로그아웃 클릭 시, 로그아웃 되어 게임 입장 페이지로 이동한다.         
        
    }

}
